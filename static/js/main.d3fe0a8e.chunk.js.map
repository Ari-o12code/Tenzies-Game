{"version":3,"sources":["components/Die.jsx","components/Main.jsx","containers/App.jsx","reportWebVitals.js","index.js"],"names":["Die","props","style","backgroundColor","isHeld","react_default","a","createElement","className","onClick","holdDie","value","Main","generateNum","Math","ceil","random","id","nanoid","allNewDice","diceArr","i","push","_useState","useState","_useState2","Object","slicedToArray","diceNum","setDiceNum","_useState3","_useState4","tenzies","setTenzies","dieHeld","every","die","useEffect","firstNum","allNumSame","num","react_confetti_min_default","map","alldice","components_Die","key","prevSetDiceNum","dice","objectSpread","oldDiceNum","App","components_Main","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_containers_App"],"mappings":"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","file":"static/js/main.d3fe0a8e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Die = (props) => {\r\n  const style = {\r\n    backgroundColor: props.isHeld? '#59E391' : '#FFFFFF'\r\n  }\r\n  return (\r\n    <div className='die'>\r\n      <div \r\n      style={style}\r\n      onClick = {props.holdDie}\r\n      className='dice'\r\n      >\r\n         <h2>{props.value}</h2> \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Die\r\n","import React, {useState, useEffect} from 'react'\r\nimport {nanoid} from 'nanoid'\r\nimport Confetti from 'react-confetti'\r\nimport Die from './Die'\r\n\r\nconst Main = () => {\r\n\r\n    const generateNum = () =>{\r\n        return     {\r\n            value: Math.ceil(Math.random() * 6),\r\n            isHeld: false,\r\n            id: nanoid()\r\n        }\r\n    }\r\n\r\n    const allNewDice = ()=>{\r\n        let diceArr = []\r\n        for(let i = 0; i < 10; i++){\r\n            diceArr.push(\r\n            generateNum()\r\n        )\r\n        }\r\n        return diceArr\r\n    }\r\n\r\nconst[diceNum, setDiceNum] = useState(allNewDice()) \r\nconst [tenzies, setTenzies] = useState(false)\r\n\r\nconst dieHeld = diceNum.every(die => die.isHeld)\r\nuseEffect(()=>{\r\n   const firstNum = diceNum[0].value\r\n   const allNumSame = diceNum.every(num => num.value === firstNum)\r\n   if(dieHeld && allNumSame){\r\n    setTenzies(true)\r\n   }\r\n\r\n}, [diceNum])\r\n\r\nconst rollDice = ()=>{\r\n    if(!tenzies){setDiceNum(oldDiceNum => oldDiceNum.map(die => {\r\n        return die.isHeld? die : generateNum()\r\n    }))}else{\r\n        setTenzies(false)\r\n        setDiceNum(allNewDice)\r\n    }\r\n}\r\n\r\nconst holdDice = (id)=>{\r\n     setDiceNum(prevSetDiceNum => \r\n        prevSetDiceNum.map(dice => {\r\n           return  dice.id === id? \r\n           {...dice, isHeld: !dice.isHeld} :\r\n            dice\r\n     }) )\r\n}\r\n\r\n\r\n\r\n  return (\r\n    <main className='main-container'>\r\n        {tenzies && <Confetti />}\r\n        <div className='inner-box'>\r\n            <h1 className='head-text tc'>Tenzies</h1>\r\n            {tenzies ? <h2 className='won-text'>YOU WON!!!</h2> : <p className='text tc'>\r\n            Roll until all dice are the same. \r\n            Click each die to freeze it at its current \r\n            value between rolls.</p>}\r\n            <div className='dices'>\r\n                {diceNum.map(alldice =>{\r\n                return <Die \r\n                key = {alldice.id} \r\n                value = {alldice.value}\r\n                isHeld = {alldice.isHeld}\r\n                holdDie = {() => holdDice(alldice.id)}\r\n                />\r\n                })}\r\n            </div>\r\n            <button\r\n            className='dice-button'\r\n            onClick={rollDice}\r\n            >\r\n            {tenzies? 'NEW GAME' : 'ROLL'}\r\n            </button>\r\n        </div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react'\r\nimport Main from '../components/Main'\r\nimport './App.css'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Main />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App /> \n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}